# rate.est.all.events[t]  <- 0
rate.est.all.events[[t]]  <- rep(0, n.samples)
error.lower.all.events[t] <- 0
error.upper.all.events[t] <- 0
} else {
rate.est.all.events[[t]]  <- rep(NA, n.samples)
error.lower.all.events[t] <- NA
error.upper.all.events[t] <- NA
}
}
} # End loop through events
# Localization fix here**
to.make.na <- sapply(rate.est.all.events, function(X) all(X == 0))
loc.est.all.events
to.make.na[is.na(to.make.na)] <- F
loc.est.all.events[to.make.na]
# Localization fix here**
to.make.na <- sapply(rate.est.all.events, function(X) all(X == 0))
loc.est.all.events[to.make.na]
to.make.na
to.make.na[is.na(to.make.na)] <- F
loc.est.all.events[to.make.na]
source.names
to.make.na <- sapply(rate.est.all.events, function(X) all(X == 0))
to.make.na
# Localization fix here**
to.make.na <- sapply(rate.est.all.events, function(X) all(X == 0))
to.make.na[is.na(to.make.na)] <- F
loc.est.all.events[to.make.na]
source.names
sort(source.names)
View(data)
# Read in simulation data
# data <- readRDS("/Users/wdaniels/Documents/code/DLQ/output_data/simulation_output.RData")
data <- readRDS('/Users/wdaniels/Desktop/HEROLD_DLQ_in.RData')
first.clean.time <- min(which(minute(data$times) %in% c(0,30)))
last.clean.time <- max(which(minute(data$times) %in% c(0,30)))
to.keep <- first.clean.time:last.clean.time
data$times <- data$times[to.keep]
data$WD <- data$WD[to.keep]
data$WS <- data$WS[to.keep]
data$obs <- data$obs[to.keep, ]
View(data)
# Localization fix here**
to.make.na <- sapply(rate.est.all.events, function(X) all(X == 0))
to.make.na
to.make.na[is.na(to.make.na)]
loc.est.all.events[to.make.na]
rm(list = ls())
data <- readRDS('/Users/wdaniels/Desktop/TAYLOR_DLQ_in.RData')
View(data)
data <- readRDS('/Users/wdaniels/Desktop/LARRYS_DLQ_in.RData')
View(data)
rm(list = ls())
data <- read.csv('/Users/wdaniels/Desktop/ADED_2024.csv/')
data <- read.csv('/Users/wdaniels/Desktop/ADED_2024.csv')
View(data)
data$time_stamp[1]
data$time_stamp[2]
library(lubridate)
as_datatime(data$time_stamp[2])
rm(list = ls())
library(lubridate)
as_datatime(data$time_stamp[2])
data <- read.csv('/Users/wdaniels/Desktop/ADED_2024.csv')
as_datatime(data$time_stamp[2])
as_datetime(data$time_stamp[2])
data$time_stamp[2]
data$time_stamp <- as_datetime(data$time_stamp)
View(data)
data <- data[order(data$time_stamp)]
data <- data[order(data$time_stamp), ]
View(data)
unique(data$position)
unique(data$core_id)
View(data)
core_ids <- unique(data$core_id)
i = 1
unique(data$position[data$core_id == core_ids[i]])
for (i in core_ids){
unique(data$position[data$core_id == core_ids[i]])
}
for (i in core_ids){
print(unique(data$position[data$core_id == core_ids[i]]))
}
for (i in core_ids){
print(unique(data$position[data$core_id == i]))
}
View(data)
View(data)
positions <- unique(data$position)
for (i in positions){
print(unique(data$core_id[data$position == i]))
}
positions
sum(data$position == "ESE")
View(data)
which(data$position == "ESE")
rm(list = ls())
library(lubridate)
data <- read.csv('/Users/wdaniels/Desktop/ADED_2024.csv')
data$time_stamp <- as_datetime(data$time_stamp)
data <- data[order(data$time_stamp), ]
rm(list = ls())
library(lubridate)
data <- read.csv('/Users/wdaniels/Desktop/ADED_2024.csv')
data$time_stamp <- as_datetime(data$time_stamp)
data <- data[order(data$time_stamp), ]
data <- data[data$position != "ESE", ]
# core_ids <- unique(data$core_id)
positions <- unique(data$position)
for (i in positions){
print(unique(data$core_id[data$position == i]))
}
sum(data$position == "ESE")
positions
core_ids <- unique(data$core_id)
test <- data[data$position == "W", ]
View(test)
uniqu(test$core_id)
unique(test$core_id)
plot(test$core_id)
which(test$core_id == "9e0faccfccd04ba988a7edaf")
range(which(test$core_id == "9e0faccfccd04ba988a7edaf"))
range(which(test$core_id == "ba4ea016096144219d66e6c7"))
test <- data[data$position == "SW", ]
unique(test$core_id)
range(which(test$core_id == "48d13588e1f74360a3a72293"))
range(which(test$core_id == "70e32e69d1594d6dba90ffd9"))
sensor.locs <- read.csv('/Users/wdaniels/Desktop/ADED2024/ADED2024_sensor_locations.csv')
View(sensor.locs)
plot(sensor.locs$Decimal_Longitude, sensor.locs$Decimal_Latitude)
View(data)
View(data)
rm(list = ls())
rm(list = ls())
library(lubridate)
data <- read.csv('/Users/wdaniels/Desktop/ADED2024/ADED2024_measurements.csv')
rm(list = ls())
library(lubridate)
data <- read.csv('/Users/wdaniels/Desktop/ADED2024/measurements.csv')
data$time_stamp <- as_datetime(data$time_stamp)
data <- data[order(data$time_stamp), ]
data <- data[data$position != "ESE", ]
View(data)
colnames(data)
data <- data[, c(1,3,6,7,8)]
colnames(data)
colnames(data) <- c("time", "name", "methane", "wind.speed", "wind.direction")
View(data)
View(data)
range(data$time)
rm(list = ls())
library(lubridate)
source.locs <- read.csv('/Users/wdaniels/Desktop/ADED2024/ADED_sources_all.csv')
View(source.locs)
groups <- unique(source.locs$group)
View(source.locs)
averages <- matrix(NA, nrow = length(groups), ncol = 3)
averages <- as.data.frame(matrix(NA, nrow = length(groups), ncol = 3))
colnames(averages) <- c("lat", "lon", "height")
i = 1
source.locs$lat[source.locs$group == groups[i]]
source.locs$lat[source.locs$group == groups[i]]
hist(source.locs$lat[source.locs$group == groups[i]])
averages$lat <- mean(source.locs$lat[source.locs$group == groups[i]], na.rm = T)
source.locs <- read.csv('/Users/wdaniels/Desktop/ADED2024/ADED_sources_all.csv')
groups <- unique(source.locs$group)
averages <- as.data.frame(matrix(NA, nrow = length(groups), ncol = 3))
colnames(averages) <- c("lat", "lon", "height")
for (i in 1:length(groups)){
averages$lat[i] <- mean(source.locs$lat[source.locs$group == groups[i]], na.rm = T)
averages$lon[i] <- mean(source.locs$lon[source.locs$group == groups[i]], na.rm = T)
averages$height[i] <- mean(source.locs$height.m[source.locs$group == groups[i]], na.rm = T)
}
View(averages)
averages$name <- groups
View(averages)
groups
averages$name <- c("Wellhead.West", "Separator.West", "Tanks", "Wellhead.East", "Separator.East")
View(averages)
write.csv(averages, "/Users/wdaniels/Desktop/ADED2024/source_locations.csv", row.names = F)
rm(list = ls())
data <- readRDS('/Users/wdaniels/Downloads/DLQ_results_new_heights.RData')
View(data)
range(data$event.mask$time)
data <- readRDS('/Users/wdaniels/Documents/code/DLQ/output_data/ADED_2024_DLQ_output_new_heights.RData')
range(data$event.mask$time)
w <- readRDS('/Users/wdaniels/Downloads/DLQ_results_new_heights.RData')
range(w$event.mask$time)
rm(list = ls())
new <- readRDS('/Users/wdaniels/Downloads/ADED_2024_DLQ_output_new_heights.RData')
old <- readRDS('/Users/wdaniels/Downloads/ADED_2024_DLQ_output_old_heights.RData')
View(new)
barplot(new$localization.estimates)
View(new)
new[["localization.estimates"]]
new$localization.estimates
barplot(new$localization.estimates)
barplot(old$localization.estimates)
test <- old$localization.estimates
barplot(test)
barplot(c("test1", "test1", "test2"))
test <- table(old$localization.estimates)
test
source("~/.active-rstudio-document", echo=TRUE)
barplot(table(new$localization.estimates))
rm(list = ls())
r <- readRDS('/Users/wdaniels/Downloads/output_data/R_gpuff_test_case_1.RData)
p <- read.csv('/Users/wdaniels/Downloads/out/02-22-22_01:33_exp_0.csv')
source("~/.active-rstudio-document", echo=TRUE)
View(r)
View(p)
View(r)
View(r[["4T-11"]])
test <- cbind(r$times, r$`4T-11`)
View(r)
test <- cbind(r$times, r=[[5]])
test <- cbind(r$times, r[[5]])
View(test)
colnames(test)[1] <- "times"
View(test)
rm(list = ls())
r <- readRDS('/Users/wdaniels/Downloads/output_data/R_gpuff_test_case_1.RData')
r <- cbind(r$times, r[[5]])
colnames(r)[1] <- "times"
r$times[1]
as_datetime(r$times[1])
r$times <- as_datetime(r$times)
View(r)
rm(list = ls())
r <- readRDS('/Users/wdaniels/Downloads/output_data/R_gpuff_test_case_1.RData')
r <- cbind(r$times, r[[5]])
colnames(r)[1] <- "times"
View(r)
r$times[1]
r$times <- as_datetime(r$times)
r$times[1]
p <- read.csv('/Users/wdaniels/Downloads/out/02-22-22_01:33_exp_0.csv')
View(p)
colnames(p)
colnames(p)[1] <- "times"
View(p)
p$times[1]
as_datetime(p$times[1], tz= "America/Denver")
source("~/.active-rstudio-document", echo=TRUE)
View(p)
plot(p$times, p[,(ind+1)])
ind <- 1
plot(p$times, p[,(ind+1)])
plot(p$times, p[,(ind+1)], type = "l")
colnames(P)
colnames(p)
colnames(r)
lines(r$times, r$N, col = "red")
plot(p$times, p$E, type = "l")
lines(r$times, r$E, col = "red")
sort(colnames(r))
p <- p[, order(colnames(p))]
View(p)
colnames(p)
p <- p[, c(8,1,2,3,4,5,6,7,9)]
source("~/.active-rstudio-document", echo=TRUE)
View(p)
View(r)
colnames(r)
colnames(p)
source("~/.active-rstudio-document", echo=TRUE)
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1])
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(r)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
legend("topleft", c("Python", "R"), col = c("black", "red"))
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Desktop/DLQ_TEST/code/MAIN_1_simulate.R", echo=TRUE)
source("~/Desktop/DLQ_TEST/code/MAIN_1_simulate.R", echo=TRUE)
source("~/Desktop/DLQ_TEST/code/MAIN_1_simulate.R", echo=TRUE)
source("~/Desktop/DLQ_TEST/code/MAIN_1_simulate.R", echo=TRUE)
rm(list = ls())
r <- readRDS('/Users/wdaniels/Downloads/output_data/R_gpuff_test_case_1.RData')
r <- cbind(r$times, r[[5]])
colnames(r)[1] <- "times"
r$times <- as_datetime(r$times)
r[,2:9] <- r[,2:9]/ 3600
p <- read.csv('/Users/wdaniels/Downloads/out/02-22-22_01:33_exp_0.csv')
colnames(p)[1] <- "times"
p$times <- as_datetime(p$times, tz= "America/Denver")
p <- p[, order(colnames(p))]
p <- p[, c(8,1,2,3,4,5,6,7,9)]
ind <- 6
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 1
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 2
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 3
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 4
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 5
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 6
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 7
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
ind <- 8
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
rm(list = ls())
r <- readRDS('/Users/wdaniels/Downloads/output_data/R_gpuff_test_case_2.RData')
r <- cbind(r$times, r[[5]])
colnames(r)[1] <- "times"
r$times <- as_datetime(r$times)
r[,2:9] <- r[,2:9]/ 3600
p <- read.csv('/Users/wdaniels/Downloads/out/02-26-22_21:36_exp_1.csv')
colnames(p)[1] <- "times"
p$times <- as_datetime(p$times, tz= "America/Denver")
p <- p[, order(colnames(p))]
p <- p[, c(8,1,2,3,4,5,6,7,9)]
ind <- 8
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
ind <- 7
plot(p$times, p[, (ind+1)], type = "l", main = colnames(p)[ind+1],
ylim = c(0, max(r[,(ind+1)], p[,(ind+1)])))
lines(r$times, r[, (ind+1)], col = "red")
legend("topleft", c("Python", "R"), col = c("black", "red"), lty = 1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list = ls())
test <- readRDS('/Users/wdaniels/Documents/code/DLQ/output_data/ADED2024_gpuff_output_new_heights.RData')
View(test)
View(test)
wellhead.west <- read.csv('/Users/wdaniels/Downloads/wellhead_west.csv')
wellhead.east <- read.csv('/Users/wdaniels/Downloads/wellhead_east.csv')
tanks <- read.csv('/Users/wdaniels/Downloads/tanks.csv')
separator.west <- read.csv('/Users/wdaniels/Downloads/separator_west.csv')
separator.east <- read.csv('/Users/wdaniels/Downloads/separator_east.csv')
source("~/.active-rstudio-document", echo=TRUE)
View(wellhead.east)
all(tanks$timestamp == wellhead.east$timestamp)
View(test)
times <- tanks$timestamp
View(test)
wind <- read.csv('/Users/wdaniels/Downloads/wind_median.csv')
View(wind)
all(wind$timestamp == tanks$timestamp)
View(wind)
View(tanks)
(tanks$timestamp %in% wind$timestamp)
!(tanks$timestamp %in% wind$timestamp)
which(!(tanks$timestamp %in% wind$timestamp))
View(wind)
View(wellhead.east)
tmp <- rbind(wind, NA)
View(tmp)
wind <- read.csv('/Users/wdaniels/Downloads/wind_median.csv')
wind <- rbind(wind, NA)
View(test)
View(tmp)
# Clear environment
if(!is.null(dev.list())){dev.off()}
rm(list = ls())
# Import necessary libraries
library(lubridate)
library(zoo)
library(rstudioapi)
if (commandArgs()[1] == "RStudio"){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
# Set path to simulation configuration file
config.file.dir <- '../input_data/DLQ_config.txt'
# Read in config file
config <- suppressWarnings(read.table(config.file.dir))
config <- strsplit(config[,1], "=")
# Parse out config file
parameters <- sapply(config, function(X) X[1])
values <- sapply(config, function(X) X[2])
View(config)
values <- sapply(config, function(X) X[2])
# Get parameter values
gap.time         <- as.numeric(values  [parameters == "gap.time"])
length.threshold <- as.numeric(values  [parameters == "length.threshold"])
# Get directories
simulation.data.path <-            as.character(values[parameters == "simulation.data.path"])
output.file.path <-                as.character(values[parameters == "output.file.path"])
helper.spike.detection.alg.path <- as.character(values[parameters == "helper.spike.detection.alg.path"])
# Source helper files which contain helper functions
source(helper.spike.detection.alg.path)
# Read in simulation data
data <- readRDS(simulation.data.path)
View(data)
source("~/.active-rstudio-document", echo=TRUE)
View(test)
