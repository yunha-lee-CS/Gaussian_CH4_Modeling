these.rate.availabilities <- all.sources.rate.est.available[this.mask]
# Initialize each component of the summary lists to hold results for each emission
source.separated.completely.correct[[s]] <- source.separated.partially.correct[[s]] <-
source.separated.identified[[s]] <- source.separated.rate.est.available[[s]] <-
vector(length = sum(this.mask))
# Loop through emissions occurring at this source
for (p in 1:sum(this.mask)){
# If all predicted locations overlapping with this true emission are correct, record a TRUE
if (all(these.loc.ests[[p]] == source.names[s]) & length(these.loc.ests[[p]]) > 0){
source.separated.completely.correct[[s]][p] <- T
}
# If any predicted locations overlapping with this true emission are correct, record a TRUE
if (any(these.loc.ests[[p]] == source.names[s]) & length(these.loc.ests[[p]]) > 0){
source.separated.partially.correct[[s]][p] <- T
}
# If there is a rate estimate available during this true emission, record a TRUE
if (these.rate.availabilities[p]){
source.separated.rate.est.available[[s]][p] <- T
}
# If there is a location estimate overlapping with this true event, it means we detected
# the event, so record a TRUE
if (length(these.loc.ests[[p]]) > 0){
source.separated.identified[[s]][p] <- T
}
}
}
# Put everything together
counts <- cbind(sapply(source.separated.completely.correct, function(X) sum(X)),
sapply(source.separated.partially.correct,  function(X) sum(X)),
sapply(source.separated.rate.est.available, function(X) sum(X)),
sapply(source.separated.identified,         function(X) sum(X))) / n.leaks
png(paste0(save.dir, "detection_localization_results.png"),
width = 1920, height = 750, res = 100, pointsize = 24)
par(mar = c(4,10,1,5))
barplot(counts,
xlab = "Percent of METEC Emission Events",
horiz = T, xlim = c(0,1),
col = alpha(c(tank.color, separator.east.color, wellhead.east.color,
wellhead.west.color, separator.west.color), 0.85),
las = 2,
xaxt = "n",
names.arg = c("Location Estimate\nCompletely Correct",
"Location Estimate\nPartially Correct",
"Rate Estimate\nAvailable",
"Correctly Identified\nOccurrence of Emission"))
axis(side = 1, at = seq(0,1, by = 0.1), labels = seq(0,100, by = 10))
dev.off()
# RESULT 4: QUANTIFICATION
#---------------------------------------------------------------------------
# Initialize vectors to hold rate estimates, true rates, ratios of estimated to true rates,
# percent differences between observations and predictions, and uncertainty on true rates
rate.est.identified.events <- rate.est.ratios <- true.rates.identified.events <-
true.rate.uncertainty.identified.events <-  rate.est.errors <-
error.lower.identified.events <- error.upper.identified.events <-
rate.est.pdiffs <- vector(length = n.identified.leaks)
count <- 1
# Loop through identified leaks only
for (l in which(identified.leaks)){
# Get true METEC emission rate (plus uncertainty) and average of predicted rates during this METEC emission
event.ind <- which(overlap.matrix[l, ])
true.rate <- singlesource.leaks$tc_C1MassFlow[l]
rate.est <- mean(rate.est.all.events[event.ind], na.rm = T)
true.rate.uncertainty <- singlesource.leaks$tc_C1MassFlowUncertainty[l]
# Save true rate, estimated rate, ratio of estimate to truth, and truth uncertainty
true.rates.identified.events[count] <- true.rate
rate.est.identified.events[count] <- rate.est
rate.est.ratios[count] <- rate.est / true.rate
rate.est.errors[count] <- rate.est - true.rate
rate.est.pdiffs[count] <- (rate.est - true.rate)/true.rate
true.rate.uncertainty.identified.events[count] <- true.rate.uncertainty
# Save percent differences
error.lower.identified.events[count] <- mean(error.lower.all.events[event.ind], na.rm = T)
error.upper.identified.events[count] <- mean(error.upper.all.events[event.ind], na.rm = T)
count <- count + 1
}
# RESULT 4.1: PLOT TIME SERIES OF RESULTS
#---------------------------------------------------------------------------
# Get start, mid, and end times for each event
event.start.times <- event.end.times <- event.mid.times <- vector(length = length(event.nums))
for (i in 1:length(event.nums)){
event.start.times[i] <- events$time[min(which(events$events == event.nums[i]))]
event.end.times[i]   <- events$time[max(which(events$events == event.nums[i]))]
event.mid.times[i]   <- mean(c(event.start.times[i], event.end.times[i]))
}
# Set plotting colors for leak location truth data
true.rate.cols <- vector(length = n.leaks)
true.rate.cols[singlesource.leaks$tc_EquipmentGroupID == "Tank"] <- tank.color
true.rate.cols[singlesource.leaks$tc_EquipmentGroupID == "Wellhead.West"] <- wellhead.west.color
true.rate.cols[singlesource.leaks$tc_EquipmentGroupID == "Separator.West"] <- separator.west.color
true.rate.cols[singlesource.leaks$tc_EquipmentGroupID == "Wellhead.East"] <- wellhead.east.color
true.rate.cols[singlesource.leaks$tc_EquipmentGroupID == "Separator.East"] <- separator.east.color
# Set plotting colors for estimated leak location data
rate.est.all.events.cols <- vector(length = n.ints)
rate.est.all.events.cols[loc.est.all.events == "Tank"] <- tank.color
rate.est.all.events.cols[loc.est.all.events == "Wellhead.West"] <- wellhead.west.color
rate.est.all.events.cols[loc.est.all.events == "Separator.West"] <- separator.west.color
rate.est.all.events.cols[loc.est.all.events == "Wellhead.East"] <- wellhead.east.color
rate.est.all.events.cols[loc.est.all.events == "Separator.East"] <- separator.east.color
plot.divs <- c(seq(min(times), max(times)+days(3), by = "5 days"))
axis.points <- seq(min(round_date(times, "day")-days(1)),
max(round_date(times, "day")+days(1)),
by = "day")
axis.labs <- paste0(month.abb[month(axis.points)],
"-", day(axis.points))
minor.axis.points <- seq(min(round_date(times, "day")-days(1)),
max(round_date(times, "day")+days(1)),
by = "6 hours")
png(paste0(save.dir, "result_time_series.png"),
res = 100, width = 1920, height = 2400, pointsize = 32)
par(mgp = c(2.5, 1, 0))
par(mar = c(1.75, 3.75, 1, 1))
par(mfrow = c(6,1))
for (i in 1:(length(plot.divs)-1)){
ylim.max <- 8000
plot(times, max.obs, col = "white",
ylim = c(0,ylim.max/1000),
xlim = c(plot.divs[i], plot.divs[i+1]),
ylab = "",
xlab = "",
xaxt= "n")
axis(side = 1, at = axis.points, labels = rep("", length(axis.points)), lwd = 4)
axis(side = 1, at = axis.points, labels = axis.labs, lwd = 0, line = -0.4)
axis(side = 1, at = minor.axis.points, labels = NA)
rect(xleft = event.start.times,
xright = event.end.times,
ybottom = 0, ytop = ylim.max/1000,
col = alpha(rate.est.all.events.cols, 0.25))
rect(xleft  = singlesource.leaks$tc_ExpStartDatetime,
xright = singlesource.leaks$tc_ExpEndDatetime,
ybottom = 0, ytop = singlesource.leaks$tc_C1MassFlow/1000,
col = alpha(true.rate.cols, 1))
points(event.mid.times, rate.est.all.events/1000, pch = 19)
segments(x0 = event.mid.times,
y0 = error.lower.all.events/1000,
y1 = error.upper.all.events/1000,
lwd = 2)
if (i == length(plot.divs)-1){
# legend("topright",
#        legend = c("Tanks", "West Wellhead", "West Separator", "East Wellhead", "East Separator",
#                   "Rate Estimate with Error Bound", NA),
#        fill = c(tank.color, wellhead.west.color, separator.west.color, wellhead.east.color, separator.east.color,
#                 NA, NA),
#        border = c("black", "black", "black", "black", "black", NA, NA),
#        pch = c(NA, NA, NA, NA, NA, 19, NA),
#        lty = c(NA, NA, NA, NA, NA, NA, 1),
#        bty = "n")
}
}
mtext("Methane Emission Rate [kg/hr]", side = 2, outer = T, line = -1.25)
dev.off()
# RESULT 4.2: PARITY PLOT
#---------------------------------------------------------------------------
# Set shape for different true source locations
tank.pch <- 21 # circle
wellhead.east.pch <- 22 # square
separator.east.pch <- 23 # diamond
separator.west.pch <- 24 # up triangle
wellhead.west.pch <- 25 # down triangle
# Set color for identified events based on true source location
rate.est.identified.events.cols <- vector(length = n.identified.leaks)
rate.est.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Tank"] <- tank.color
rate.est.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Wellhead.West"] <- wellhead.west.color
rate.est.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Separator.West"] <- separator.west.color
rate.est.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Wellhead.East"] <- wellhead.east.color
rate.est.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Separator.East"] <- separator.east.color
# Shape shape for identified events based on true source location
rate.est.identified.events.pch <- vector(length = n.identified.leaks)
rate.est.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Tank"] <- tank.pch
rate.est.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Wellhead.West"] <- wellhead.west.pch
rate.est.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Separator.West"] <- separator.west.pch
rate.est.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Wellhead.East"] <- wellhead.east.pch
rate.est.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[identified.leaks] == "Separator.East"] <- separator.east.pch
# Pick out missed leaks
non.identified.leaks <- singlesource.leaks$tc_C1MassFlow[!identified.leaks]
n.non.identified.leaks <- length(non.identified.leaks)
# Set color for non-identified events based on true source location
rate.est.non.identified.events.cols <- vector(length = n.non.identified.leaks)
rate.est.non.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Tank"] <- tank.color
rate.est.non.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Wellhead.West"] <- wellhead.west.color
rate.est.non.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Separator.West"] <- separator.west.color
rate.est.non.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Wellhead.East"] <- wellhead.east.color
rate.est.non.identified.events.cols[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Separator.East"] <- separator.east.color
# Set shape for non-identified events based on true source location
rate.est.non.identified.events.pch <- vector(length = n.non.identified.leaks)
rate.est.non.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Tank"] <- tank.pch
rate.est.non.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Wellhead.West"] <- wellhead.west.pch
rate.est.non.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Separator.West"] <- separator.west.pch
rate.est.non.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Wellhead.East"] <- wellhead.east.pch
rate.est.non.identified.events.pch[singlesource.leaks$tc_EquipmentGroupID[!identified.leaks] == "Separator.East"] <- separator.east.pch
y <- rate.est.identified.events/1000
x <- true.rates.identified.events/1000
this.fit <- lm(y ~ x + 0)
small.fit <- lm(y[x < 1] ~ x[x < 1] + 0)
small.fit
intercept <- this.fit$coefficients[1]
slope <- this.fit$coefficients[2]
r2 <- summary(this.fit)$r.squared
small.intercept <- small.fit$coefficients[1]
small.slope <- small.fit$coefficients[2]
small.r2 <- summary(small.fit)$r.squared
zoom.in <- 1
no.rate.factor <- 0.04
no.rate.est.mask <- is.na(rate.est.identified.events)
png(paste0(save.dir, 'parity.png'),
res = 100, pointsize = 24, width = 1920, height = 1000)
par(mgp = c(2.25, 0.75, 0))
par(mar = c(3.5,2,1,1))
par(oma = c(0,1.5,0,0))
par(mfrow = c(1,2))
axis.max <- 10.5
no.rate.est.y <- -no.rate.factor*axis.max
################################################ START ZOOM OUT PLOT
plot(true.rates.identified.events/1000, rate.est.identified.events/1000,
asp = 1,
pch = rate.est.identified.events.pch,
col = rate.est.identified.events.cols,
bg = rate.est.identified.events.cols,
xlim = c(0,axis.max), ylim = c(no.rate.est.y,axis.max),
ylab = "", las = 1,
xlab = "METEC Emission Rate [kg/hr]")
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 0, lwd = 3, col = "grey55") # false negative
segments(x0 = 0, y0 = 0, x1 = 0, y1 = 20, lwd = 3, col = "grey55") # false positive
points(true.rates.identified.events/1000, rate.est.identified.events/1000,
asp = 1,
pch = rate.est.identified.events.pch,
col = rate.est.identified.events.cols,
bg = rate.est.identified.events.cols)
points(rep(0, n.false.positives), rate.est.all.events[false.positives]/1000,
pch = '*', col= "black", cex = 2)
points(non.identified.leaks/1000, rep(0, n.non.identified.leaks),
col = rate.est.non.identified.events.cols,
bg = rate.est.non.identified.events.cols,
pch = rate.est.non.identified.events.pch)
segments(x0 = true.rates.identified.events/1000,
y0 = pmax(0,error.lower.identified.events/1000),
y1 = error.upper.identified.events/1000,
col = alpha(rate.est.identified.events.cols, 0.5),
lwd = 2)
segments(x0 = true.rates.identified.events/1000 - true.rate.uncertainty.identified.events/1000,
x1 = true.rates.identified.events/1000 + true.rate.uncertainty.identified.events/1000,
y0 = rate.est.identified.events/1000,
col = alpha(rate.est.identified.events.cols, 0.5),
lwd = 2)
segments(x0 = 0, y0 = no.rate.est.y, x1 = 20, y1 = no.rate.est.y, lwd = 3,
lty = 4, col = "gray55")
points(true.rates.identified.events[no.rate.est.mask]/1000, rep(no.rate.est.y, sum(no.rate.est.mask)),
col = rate.est.identified.events.cols[no.rate.est.mask],
pch = rate.est.identified.events.pch[no.rate.est.mask],
bg = rate.est.identified.events.cols[no.rate.est.mask])
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 20, lwd = 3) # 1:1
segments(x0 = 0, y0 = 0, x1 = 40, y1 = 20, lwd = 3, lty = 2) # factor of 2
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 40, lwd = 3, lty = 2) # factor of 2
segments(x0 = 0, y0 = 0, x1 = 60, y1 = 20, lwd = 3, lty = 3) # factor of 3
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 60, lwd = 3, lty = 3) # factor of 3
# segments(x0 = -intercept/slope, y0 = 0, x1 = (20-intercept)/slope, y1 = 20, lwd = 3, col = "magenta") # best fit
segments(x0 = 0, y0 = 0, x1 = (20)/intercept, y1 = 20, lwd = 3, col = "magenta") # best fit
rect(xleft = 0, ybottom = 0, xright = zoom.in, ytop = zoom.in, border = "black", lwd = 4)
# legend("topleft", c("1:1", "Factor of 2", "Factor of 3", "False positive & false negative", "No rate estimate", "Best fit"),
#        lwd = 5, cex = 1,
#        col = c("black", "black", "black", "gray55", "grey55", "magenta"),
#        lty = c(1,2,3,1,4,1),
# )
# legend("bottomright",
#        legend = c("Tanks", "West Wellhead", "West Separator", "East Wellhead", "East Separator", "False Positive"),
#        col = c(tank.color, wellhead.west.color, separator.west.color, wellhead.east.color, separator.east.color, "black"),
#        pt.bg = c(tank.color, wellhead.west.color, separator.west.color, wellhead.east.color, separator.east.color, NA),
#        pch = c(tank.pch, wellhead.west.pch, separator.west.pch, wellhead.east.pch, separator.east.pch, 42),
#        border = c("black", "black", "black", "black", "black", NA),
#        pt.cex = c(1,1,1,1,1,2))
mtext("Estimated Emission Rate [kg/hr]", side = 2, outer = T, line = 0.5)
################################################ START ZOOM IN PLOT
no.rate.est.y <- -no.rate.factor*zoom.in
plot(true.rates.identified.events/1000, rate.est.identified.events/1000,
asp = 1, las = 1,
col = rate.est.identified.events.cols,
bg = rate.est.identified.events.cols,
pch = rate.est.identified.events.pch,
xlim = c(0,zoom.in), ylim = c(no.rate.est.y,zoom.in),
ylab = "",
xlab = "METEC Emission Rate [kg/hr]")
box(col = "black", lwd = 4)
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 0, lwd = 3, col = "grey55") # false negative
segments(x0 = 0, y0 = 0, x1 = 0, y1 = 20, lwd = 3, col = "grey55") # false positive
points(true.rates.identified.events/1000, rate.est.identified.events/1000,
col = rate.est.identified.events.cols,
bg = rate.est.identified.events.cols,
pch = rate.est.identified.events.pch)
points(rep(0, n.false.positives), rate.est.all.events[false.positives]/1000,
pch = '*', col= "black", cex = 2)
points(non.identified.leaks/1000, rep(0, n.non.identified.leaks),
col = rate.est.non.identified.events.cols,
pch = 19)
segments(x0 = true.rates.identified.events/1000,
y0 = pmax(0,error.lower.identified.events)/1000,
y1 = error.upper.identified.events/1000,
col = alpha(rate.est.identified.events.cols, 0.5),
lwd = 2)
segments(x0 = pmax(0,true.rates.identified.events/1000 - true.rate.uncertainty.identified.events/1000),
x1 = true.rates.identified.events/1000 + true.rate.uncertainty.identified.events/1000,
y0 = rate.est.identified.events/1000,
col = alpha(rate.est.identified.events.cols, 0.5),
lwd = 2)
segments(x0 = 0, y0 = no.rate.est.y, x1 = 20, y1 = no.rate.est.y, lwd = 3,
lty = 4, col = "gray55")
points(true.rates.identified.events[no.rate.est.mask]/1000, rep(no.rate.est.y, sum(no.rate.est.mask)),
col = rate.est.identified.events.cols[no.rate.est.mask],
pch = rate.est.identified.events.pch[no.rate.est.mask],
bg = rate.est.identified.events.cols[no.rate.est.mask])
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 20, lwd = 3) # 1:1
segments(x0 = 0, y0 = 0, x1 = 40, y1 = 20, lwd = 3, lty = 2) # factor of 2
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 40, lwd = 3, lty = 2) # factor of 2
segments(x0 = 0, y0 = 0, x1 = 60, y1 = 20, lwd = 3, lty = 3) # factor of 3
segments(x0 = 0, y0 = 0, x1 = 20, y1 = 60, lwd = 3, lty = 3) # factor of 3
# segments(x0 = -intercept/slope, y0 = 0, x1 = (20-intercept)/slope, y1 = 20, lwd = 3, col = "magenta")
segments(x0 = 0, y0 = 0, x1 = (20)/intercept, y1 = 20, lwd = 3, col = "magenta") # best fit
# segments(x0 = 0, y0 = 0, x1 = (20)/small.intercept, y1 = 20, lwd = 3, col = "magenta", lty = 2) # best fit
dev.off()
# RESULT 4.3: RATE ESTIMATE RATIOS
#---------------------------------------------------------------------------
# Create a sequence of factors
this.seq <- seq(1, max(1/rate.est.ratios, rate.est.ratios, na.rm = T) + 0.01, by = 0.01)
# Initialize vectors to hold the number of events whose ratio is below the corresponding factor in "this.seq"
to.save.all <- to.save.big <- to.save.small <- vector(length = length(this.seq))
# Loop through sequence of factors
for (i in 1:length(this.seq)){
# Save number of emissions that have a ratio less than this factor
to.save.all[i] <- sum(rate.est.ratios > 1/this.seq[i] & rate.est.ratios < this.seq[i], na.rm = T) / sum(!is.na(rate.est.ratios))
# Save number of emissions > 1kg/hr that have a ratio less than this factor
this.mask <- true.rates.identified.events > 1000
to.save.big[i] <- sum(rate.est.ratios[this.mask] > 1/this.seq[i] & rate.est.ratios[this.mask] < this.seq[i], na.rm = T) / sum(!is.na(rate.est.ratios[this.mask]))
# Save number of emissions < 1kg/hr that have a ratio less than this factor
this.mask <- true.rates.identified.events <= 1000
to.save.small[i] <- sum(rate.est.ratios[this.mask] > 1/this.seq[i] & rate.est.ratios[this.mask] < this.seq[i], na.rm = T) / sum(!is.na(rate.est.ratios[this.mask]))
}
# Set probabilities at which to print the empirical CDF value
probs <- c(1, 0.90, 0.75, 0.5)
# Initialize variables to hold the factors that occur at probs percent on the CDF
factors.all <- factors.big <- factors.small <- vector(length = length(probs))
# Loop through probabilities of interest
for (i in 1:length(probs)){
factors.all[i] <- this.seq[which(to.save.all >= probs[i])[1]]
factors.big[i] <- this.seq[which(to.save.big >= probs[i])[1]]
factors.small[i] <- this.seq[which(to.save.small >= probs[i])[1]]
}
# Print number of emission events less than factor of 2 and 3 from truth
sum(rate.est.ratios > 1/2 & rate.est.ratios < 2, na.rm = T) / sum(!is.na(rate.est.ratios))
sum(rate.est.ratios > 1/3 & rate.est.ratios < 3, na.rm = T) / sum(!is.na(rate.est.ratios))
# Set plotting colors
under.est.col <- "#00524F"
over.est.col <- "#29A385"
line.col <- alpha("black", 0.475)
lwd.val <- 3
lty.val <- 3
axis.cex <- 0.82
label.line <- 1.8
png(paste0(save.dir, "over_under_est.png"),
res = 100, pointsize = 24, width = 1920, height = 800)
par(mfrow= c(1,2))
par(mgp = c(2, 0.55, 0))
par(mar = c(1,0.5,1,0.5))
par(oma = c(2,2.5,2,0))
################################################ START < 1KG/HR HISTOGRAM
this.mask <- true.rates.identified.events <= 1000
rates.to.use <- rate.est.ratios[this.mask]
sum(rates.to.use > 1/2 & rates.to.use < 2, na.rm = T) / sum(!is.na(rates.to.use))
sum(rates.to.use > 1/3 & rates.to.use < 3, na.rm = T) / sum(!is.na(rates.to.use))
this.mask <- true.rates.identified.events <= 1000
rates.to.use <- rate.est.ratios[this.mask]
sum(rates.to.use > 1/2 & rates.to.use < 2, na.rm = T) / sum(!is.na(rates.to.use))
sum(rates.to.use > 1/3 & rates.to.use < 3, na.rm = T) / sum(!is.na(rates.to.use))
under.est.mask <- rates.to.use <= 1
under.est.mask[is.na(under.est.mask)] <- F
rates.to.use[under.est.mask] <- 1/rates.to.use[under.est.mask]
rates.to.plot <- rates.to.use
rates.to.plot[under.est.mask] <- -rates.to.plot[under.est.mask]
rates.to.plot[under.est.mask] <- rates.to.plot[under.est.mask] + 1
rates.to.plot[!under.est.mask] <- rates.to.plot[!under.est.mask] - 1
percent.of.events <- seq(1,100,1)/100
lower <- upper <- vector(length = length(percent.of.events))
for (i in 1:length(percent.of.events)){
this.quant <- quantile(rates.to.plot, probs = c(0.5-percent.of.events[i]/2, 0.5+percent.of.events[i]/2), na.rm = T)
lower[i] <- this.quant[1]
upper[i] <- this.quant[2]
}
hist(rates.to.plot, breaks=seq(-6,6,1), col=over.est.col, xaxt = "n", xlab = "",
ylab = "", xpd = NA, ylim = c(-0.25,16.5), yaxt = "n", main = "")
mtext("Number of Emission Events", side = 2, line = label.line)
box()
abline(v = c(lower[50], upper[50]),
col = line.col, lwd = lwd.val, lty = 1)
abline(v = c(lower[75], upper[75]),
col = line.col, lwd = lwd.val, lty = 2)
abline(v = c(lower[90], upper[90]),
col = line.col, lwd = lwd.val, lty = 3)
round(c(100*((-1/(lower[50]-1))-1), 100*(upper[50]+1-1)), 1)
round(c(100*((-1/(lower[75]-1))-1), 100*(upper[75]+1-1)), 1)
round(c(100*((-1/(lower[90]-1))-1), 100*(upper[90]+1-1)), 1)
round(c(lower[50]-1, upper[50]+1), 1)
round(c(lower[75]-1, upper[75]+1), 1)
round(c(lower[90]-1, upper[90]+1), 1)
tmp <- median(rates.to.plot,na.rm=T)
small.median.fd <- ifelse(tmp < 0, tmp-1, tmp+1)
print(round(small.median.fd, 2))
small.median.pd <- 100*ifelse(small.median.fd < 0, (-1/small.median.fd) - 1, small.median.fd)
print(round(small.median.pd, 1))
hist(rates.to.plot[under.est.mask], breaks=seq(-8,8,1), col=under.est.col, add=TRUE, main = "")
hist(rates.to.plot[!under.est.mask], breaks=seq(-8,8,1), col=over.est.col, add=TRUE, main = "")
segments(x0=median(rates.to.plot,na.rm=T), y0 = 0, y1 = 13, col = "#FB514B", lwd = lwd.val+2)
axis.factors <- c(-9:-2, 1:9)
converted.axis.factors <- ifelse(axis.factors < 0, -1/axis.factors, axis.factors)
axis.pdiff <- round(100 * (converted.axis.factors-1), 0)
axis(side = 1, at = seq(-8,8,1), labels = axis.factors, cex.axis = axis.cex)
axis(side = 2, at = seq(0,16,2), cex.axis = axis.cex)
axis(side = 3, at = seq(-8,8,2), labels = paste0(axis.pdiff[seq(1,length(axis.pdiff),2)],"%"), cex.axis = axis.cex)
################################################ START > 1KG/HR HISTOGRAM
this.mask <- true.rates.identified.events > 1000
rates.to.use <- rate.est.ratios[this.mask]
sum(rates.to.use > 1/2 & rates.to.use < 2, na.rm = T) / sum(!is.na(rates.to.use))
sum(rates.to.use > 1/3 & rates.to.use < 3, na.rm = T) / sum(!is.na(rates.to.use))
rates.to.use
this.mask <- true.rates.identified.events > 1000
this.mas
this.mask
sum(this.mask)
sum(this.mask)/length(this.mask)
sum(!this.mask)/length(this.mask)
config.file.dir <- 'https://raw.github.com/wsdaniels/DLQ/master/input_data/simulation_config.txt'
# Read in config file
config <- read.table(config.file.dir)
View(config)
config <- strsplit(config[,1], "=")
# Parse out config file
parameters <- sapply(config, function(X) X[1])
values <- sapply(config, function(X) X[2])
# Get parameter values
num.cores.to.use <- as.numeric(values  [parameters == "num.cores.to.use"])
dt               <- as.numeric(values  [parameters == "dt"])
cutoff.t         <- as.numeric(values  [parameters == "cutoff.t"])
ignore.dist      <- as.numeric(values  [parameters == "ignore.dist"])
chunk.size       <- as.numeric(values  [parameters == "chunk.size"])
emission.rate    <- as.numeric(values  [parameters == "emission.rate"])
run.mode         <- as.character(values[parameters == "run.mode"])
tz               <- as.character(values[parameters == "tz"])
# Get directories
raw.sensor.observations.path <-     as.character(values[parameters == "raw.sensor.observations.path"])
source.locations.path <-            as.character(values[parameters == "source.locations.path"])
sensor.locations.path <-            as.character(values[parameters == "sensor.locations.path"])
output.file.path <-                 as.character(values[parameters == "output.file.path"])
helper.distance.conversions.path <- as.character(values[parameters == "helper.distance.conversions.path"])
helper.gpuff.function.path <-       as.character(values[parameters == "helper.gpuff.function.path"])
# Source helper files which contain helper functions
source(helper.distance.conversions.path)
# Clear environment
rm(list = ls())
# Import necessary libraries
library(zoo)
library(lubridate)
library(foreach)
library(doParallel)
# Set path to simulation configuration file
setwd(getSrcDirectory(function(){})[1])
# Clear environment
rm(list = ls())
# Import necessary libraries
library(zoo)
library(lubridate)
library(foreach)
library(doParallel)
# Set path to simulation configuration file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages(rstudioapi)
install.packages("rstudioapi")
library(rstudioapi)
# Set path to simulation configuration file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
config.file.dir <- '../input_data/simulation_config.txt'
# Read in config file
config <- read.table(config.file.dir)
config <- strsplit(config[,1], "=")
source("~/Documents/code/DLQ/code/MAIN_3_analyze_results.R", echo=TRUE)
# Clear environment
if(!is.null(dev.list())){dev.off()}
rm(list = ls())
# Import necessary libraries
library(lubridate)
library(zoo)
library(rstudioapi)
# Set path to simulation configuration file
if (commandArgs()[1] == "RStudio"){
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
}
config.file.dir <- '../input_data/DLQ_config.txt'
# Read in config file
config <- suppressWarnings(read.table(config.file.dir))
config <- strsplit(config[,1], "=")
# Parse out config file
parameters <- sapply(config, function(X) X[1])
values <- sapply(config, function(X) X[2])
# Get parameter values
gap.time         <- as.numeric(values  [parameters == "gap.time"])
length.threshold <- as.numeric(values  [parameters == "length.threshold"])
# Get directories
simulation.data.path <-            as.character(values[parameters == "simulation.data.path"])
output.file.path <-                as.character(values[parameters == "output.file.path"])
helper.spike.detection.alg.path <- as.character(values[parameters == "helper.spike.detection.alg.path"])
# Source helper files which contain helper functions
source(helper.spike.detection.alg.path)
# Read in simulation data
data <- readRDS(simulation.data.path)
install.packages("diffr")
library(diffr)
diffr('/Users/wdaniels/Downloads/kellis.R', '/Users/wdaniels/Documents/code/DLQ/code/HELPER_spike_detection_algorithm.R')
